{"version":3,"file":"static/js/202.d39858e3.chunk.js","mappings":"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","sources":["components/Sections/IntroSection/IntroSection.component.jsx","components/Select/SelectSpecializare/SelectSpecializare.component.jsx","components/Select/SelectServiciu/SelectServiciu.component.jsx","components/Select/SelectTerapeut/SelectTerapeut.component.jsx","components/Select/SelectTimeSlot/SelectTimeSlot.component.jsx","components/Input/Input.component.jsx","hooks/useSetServiciuContext.jsx","hooks/useFilterTerapeuti.jsx","hooks/useGetTerapeutCalendarAndProgramari.jsx","hooks/useGetTimeslotsForDateAndTerapeut.jsx","hooks/useFilterHours.jsx","hooks/useCreateComanda.jsx","hooks/useCreateProgramari.jsx","components/ErrorScreen/ErrorScreen.component.jsx","graphql/mutations.js","hooks/useFilterServicii.jsx","components/Sections/ProgramareSection/ProgramareSection.component.jsx","graphql/queries.js"],"sourcesContent":["import React from 'react';\nimport './IntroSection.component.scss';\n\nexport default function IntroSection({ caption, title, copy }) {\n  return (\n    <div className=\"intro-section\">\n      <div className=\"intro-section-header\">\n        <p className=\"caption\">{caption}</p>\n        <h2>{title}</h2>\n      </div>\n      <p>{copy}</p>\n    </div>\n  );\n}\n","import React, { useRef } from 'react';\r\nimport './SelectSpecializare.component.scss';\r\nimport { checkIfActiveElement } from '../../../utils.js';\r\n\r\nexport default function SelectSpecializare({\r\n  options,\r\n  label,\r\n  name,\r\n  value,\r\n  handleChange,\r\n}) {\r\n  const inputRef = useRef(null);\r\n  checkIfActiveElement(inputRef);\r\n\r\n  return (\r\n    <>\r\n      {options.length > 0 && (\r\n        <div className=\"select-atom atom-field\">\r\n          <label>\r\n            <p>Specializare</p>\r\n          </label>\r\n          <select\r\n            name={name}\r\n            onChange={handleChange}\r\n            defaultValue={'default'}\r\n            ref={inputRef}\r\n          >\r\n            {\r\n              <option disabled hidden value={'default'}>\r\n                {value}\r\n              </option>\r\n            }\r\n            {options.map((option, index) => (\r\n              <option key={index} value={option.denumire}>\r\n                {option.denumire}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useRef } from 'react';\r\nimport './SelectServiciu.component.scss';\r\nimport { checkIfActiveElement } from '../../../utils.js';\r\n\r\nexport default function SelectServiciu({\r\n  options,\r\n  label,\r\n  name,\r\n  value,\r\n  handleChange,\r\n}) {\r\n  const inputRef = useRef(null);\r\n  checkIfActiveElement(inputRef);\r\n  return (\r\n    <>\r\n      {options && (\r\n        <>\r\n          {options.length > 0 && (\r\n            <div className=\"select-atom atom-field\">\r\n              <label>\r\n                <p>Serviciu</p>\r\n              </label>\r\n              <select\r\n                name={name}\r\n                onChange={handleChange}\r\n                defaultValue={'default'}\r\n                ref={inputRef}\r\n              >\r\n                {\r\n                  <option disabled hidden value={'default'}>\r\n                    {value}\r\n                  </option>\r\n                }\r\n                {options.map((option, index) => (\r\n                  <option key={index} value={option.id}>\r\n                    {option.denumire}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useRef } from 'react';\nimport './SelectTerapeut.component.scss';\nimport { checkIfActiveElement } from '../../../utils.js';\n\nexport default function SelectTerapeut({\n  options,\n  label,\n  name,\n  value,\n  handleChange,\n}) {\n  const inputRef = useRef(null);\n  checkIfActiveElement(inputRef);\n\n  return (\n    <div className=\"select-atom atom-field\">\n      <label>\n        <p>Terapeut</p>\n      </label>\n      <select\n        name={name}\n        onChange={handleChange}\n        defaultValue={'default'}\n        ref={inputRef}\n      >\n        <option disabled hidden value={'default'}>\n          {value}\n        </option>\n        {options &&\n          options.map((option, index) => (\n            <option key={index} value={option.id}>\n              {option.nume} {option.prenume}\n            </option>\n          ))}\n      </select>\n    </div>\n  );\n}\n","import React, { useRef } from 'react';\nimport './SelectTimeSlot.component.scss';\nimport { checkIfActiveElement } from '../../../utils.js';\n\nexport default function SelectTimeSlot({\n  label,\n  value,\n  handleChange,\n  options,\n}) {\n  const inputRef = useRef(null);\n  checkIfActiveElement(inputRef);\n\n  const convertToTime = (input) => {\n    let hours = Math.floor(input / 60);\n    let minutes = input % 60;\n    return `${hours}:${minutes}`;\n  };\n\n  return (\n    <>\n      <div className=\"select-atom atom-field\">\n        <label>\n          <p>Ora</p>\n        </label>\n        <select\n          name={label}\n          onChange={handleChange}\n          defaultValue={'default'}\n          ref={inputRef}\n        >\n          {\n            <option disabled hidden value={'default'}>\n              {value}\n            </option>\n          }\n          {options &&\n            options.map((option, index) => (\n              <option key={index} value={option}>\n                {convertToTime(option)}\n              </option>\n            ))}\n        </select>\n      </div>\n    </>\n  );\n}\n","import React, {useRef} from 'react';\nimport './Input.component.scss';\nimport {checkIfActiveElement} from '../../utils.js';\n\nexport default function Input({\n  label,\n  value,\n  type,\n  placeholder,\n  handleChange,\n}) {\n\n  const inputRef = useRef(null);\n  checkIfActiveElement(inputRef);\n\n  return (\n    <div className=\"input-atom\" id={label}>\n      <label>\n        <p>{label}</p>\n      </label>\n      <input\n        value={value}\n        name={label}\n        type={type}\n        placeholder={placeholder}\n        onChange={handleChange}\n        required\n        ref={inputRef}\n      />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\r\n\r\nconst useSetServiciuContext = (servicii, serviciu) => {\r\n  const [specializare, setSpecializare] = useState();\r\n  const [sedinte, setSedinte] = useState(0);\r\n  const [durataSedinta, setDurataSedinta] = useState();\r\n\r\n  useEffect(() => {\r\n    if (servicii) {\r\n      servicii.forEach((el) => {\r\n        if (parseInt(serviciu) === el.id) {\r\n          setSedinte(el.sedinte);\r\n          setSpecializare(el.specializare);\r\n          setDurataSedinta((el.durata + 60) * 60000); //milliseconds\r\n        }\r\n      });\r\n    }\r\n  }, [serviciu, servicii]);\r\n\r\n  return {\r\n    specializare,\r\n    sedinte,\r\n    durataSedinta,\r\n  };\r\n};\r\n\r\nexport default useSetServiciuContext;\r\n","import { useState, useEffect } from 'react';\n\nconst useFilterTerapeuti = (terapeuti, specializare) => {\n  const [filteredTerapeuti, setFilteredTerapeuti] = useState();\n\n  useEffect(() => {\n    if (specializare) {\n      const filteredArray = terapeuti.filter((terapeut) =>\n        terapeut.specializare.toLowerCase().includes(specializare),\n      );\n      setFilteredTerapeuti(filteredArray);\n    }\n  }, [terapeuti, specializare]);\n\n  return { filteredTerapeuti };\n};\n\nexport default useFilterTerapeuti;\n","import { useQuery } from \"@apollo/client\";\r\nimport { useState, useEffect } from 'react';\r\nimport { GET_PARTNER_CURRENT_SCHEDULE, GET_PARTNER_FILLED_TIME_SLOTS } from \"../graphql/queries\";\r\nimport { processPartnerSched } from \"../utils\";\r\n\r\nconst useGetTerapeutCalendarAndProgramari = (terapeuti, terapeutId) => {\r\n  const [terapeutCalendar, setTerapeutCalendar] = useState([]);\r\n  const [terapeutProgramari, setTerapeutProgramari] = useState([]);\r\n\r\n  /* useEffect(() => {\r\n    if (terapeutId) {\r\n      if (terapeutId.terapeut !== '') {\r\n        for (let i = 0; i < terapeuti.length; i++) {\r\n          if (terapeuti[i].id == terapeutId) {\r\n            setTerapeutCalendar(terapeuti[i].calendar);\r\n            setTerapeutProgramari(terapeuti[i].programari);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [terapeutId]);\r\n\r\n  return { terapeutCalendar, terapeutProgramari }; */\r\n  const partnerSchedQObj = useQuery(GET_PARTNER_CURRENT_SCHEDULE, {variables: {id: parseFloat(terapeutId)}});\r\n  const querySchedData = partnerSchedQObj?.data ? partnerSchedQObj.data['getPartnerCurrentSchedule'] : [];\r\n  \r\n  const partnerFilledTSlotsQObj = useQuery(GET_PARTNER_FILLED_TIME_SLOTS, {variables: {id: parseFloat(terapeutId)}});\r\n  const queryFilledTSlotsData = partnerFilledTSlotsQObj?.data ? partnerFilledTSlotsQObj.data['getPartnerFilledTimeSlots'] : [];\r\n  useEffect(() => {   \r\n    if(querySchedData) {\r\n      const processedSched  = processPartnerSched(querySchedData);    \r\n      if(processedSched.length){\r\n        setTerapeutCalendar(processedSched);\r\n      } \r\n    }\r\n    if(queryFilledTSlotsData) {\r\n      const processedTSlots = processPartnerSched(queryFilledTSlotsData);    \r\n      if(processedTSlots.length){\r\n        setTerapeutProgramari(processedTSlots);\r\n      } \r\n    }\r\n  }, [querySchedData, queryFilledTSlotsData])\r\n  \r\n  return { terapeutCalendar, terapeutProgramari };\r\n};\r\n\r\nexport default useGetTerapeutCalendarAndProgramari;\r\n","import { useState, useEffect } from 'react';\nimport { timestampToDayAndMonth, dateToDayAndMonth } from '../utils.js';\n\nconst useGetTimeslotsForDateAndTerapeut = (\n  startDate,\n  terapeutCalendar,\n  terapeutProgramari,\n) => {\n  const [calendarTimeslotsForDate, setCalendarTimeslotsForDate] = useState({});\n\n  useEffect(() => {\n    if (startDate) {\n      setCalendarTimeslotsForDate({});\n      for (let i = 0; i < terapeutCalendar.length; i++) {\n        if (\n          timestampToDayAndMonth(terapeutCalendar[i].timeSlotStart)[0] ===\n          dateToDayAndMonth(startDate)[0]\n        ) {\n          setCalendarTimeslotsForDate({\n            start: terapeutCalendar[i].timeSlotStart,\n            end: terapeutCalendar[i].timeSlotEnd,\n          });\n        }\n      }\n    }\n  }, [startDate, terapeutCalendar]);\n\n  const [programariTimeslotsForDate, setProgramariTimeslotsForDate] = useState(\n    {},\n  );\n\n  useEffect(() => {\n    if (startDate) {\n      setProgramariTimeslotsForDate({});\n      for (let i = 0; i < terapeutProgramari.length; i++) {\n        if (\n          timestampToDayAndMonth(terapeutProgramari[i].timeSlotStart)[0] ===\n          dateToDayAndMonth(startDate)[0]\n        ) {\n          setProgramariTimeslotsForDate({\n            start: terapeutProgramari[i].timeSlotStart,\n            end: terapeutProgramari[i].timeSlotEnd,\n          });\n        }\n      }\n    }\n  }, [startDate, terapeutProgramari]);\n\n  return { calendarTimeslotsForDate, programariTimeslotsForDate };\n};\n\nexport default useGetTimeslotsForDateAndTerapeut;\n","import { useState, useEffect } from 'react';\n\nconst useFilterHours = (\n  calendarTimeslotsForDate,\n  programariTimeslotsForDate,\n  startDate,\n  durataSedinta,\n) => {\n  const [filteredHours, setFilteredHours] = useState();\n  const options = [];\n\n  for (let i = 0; i < 48; i++) {\n    options.push(i * 30);\n  }\n\n  useEffect(() => {\n    const hoursAndMinutes = [];\n    const startIntervalCalendar =\n      (calendarTimeslotsForDate.start - startDate) / 60000;\n    const endIntervalCalendar =\n      (calendarTimeslotsForDate.end - startDate) / 60000;\n    const startIntervalProgramari =\n      (programariTimeslotsForDate.start - startDate) / 60000;\n    const endIntervalProgramari =\n      (programariTimeslotsForDate.end - startDate) / 60000;\n    if (durataSedinta) {\n      options.forEach((option) => {\n        if (\n          (option >= startIntervalCalendar) &\n          (option <= endIntervalCalendar - (durataSedinta / 60000 - 60))\n        ) {\n          if (startIntervalProgramari) {\n            if (\n              option <= startIntervalProgramari - durataSedinta / 60000 ||\n              option >= endIntervalProgramari\n            ) {\n              hoursAndMinutes.push(option);\n            }\n          } else {\n            hoursAndMinutes.push(option);\n          }\n        }\n      });\n    } else {\n      options.forEach((option) => {\n        hoursAndMinutes.push(option);\n      });\n    }\n\n    setFilteredHours(hoursAndMinutes);\n  }, [\n    calendarTimeslotsForDate,\n    programariTimeslotsForDate,\n    startDate,\n    durataSedinta,\n  ]);\n\n  return { filteredHours };\n};\n\nexport default useFilterHours;\n","import { useEffect } from 'react';\n\nconst useCreateComanda = (\n  programari,\n  sedinte,\n  specializare,\n  comanda,\n  setComanda,\n) => {\n  useEffect(() => {\n    setComanda({\n      ...comanda,\n      programari: programari,\n    });\n  }, [programari]);\n\n  useEffect(() => {\n    setComanda({\n      ...comanda,\n      sedinte: sedinte,\n      specializare: specializare,\n    });\n  }, [sedinte]);\n};\n\nexport default useCreateComanda;\n","import { useState, useEffect } from 'react';\r\n\r\nconst useCreateProgramari = (startDate, terapeutId, timeSlotStart, sedinte) => {\r\n  const [programari, setProgramari] = useState();\r\n\r\n  //SET PROGRAMARE\r\n  useEffect(() => {\r\n    if (startDate) {\r\n      const programari = [];\r\n      const programareInitiala = {\r\n        sedinta: 1,\r\n        terapeut: terapeutId,\r\n        timeSlotStart:\r\n          startDate.setHours(0, 0, 0, 0) + parseInt(timeSlotStart, 10) * 60000,\r\n        timeSlotEnd:\r\n          startDate.setHours(0, 0, 0, 0) +\r\n          (parseInt(timeSlotStart, 10) + 60) * 60000,\r\n      };\r\n      programari.push(programareInitiala);\r\n      /* for (let i = 1; i < sedinte; i++) {\r\n        const programare = {\r\n          sedinta: i + 1,\r\n          terapeut: 'TBD',\r\n          timeSlotStart: 'TBD',\r\n          timeSlotEnd: 'TBD',\r\n        };\r\n        programari.push(programare);\r\n      } */\r\n      setProgramari(programari);\r\n    }\r\n  }, [startDate, timeSlotStart]);\r\n\r\n  return { programari };\r\n};\r\nexport default useCreateProgramari;\r\n","import React from 'react';\nimport './ErrorScreen.component.scss';\n\nexport default function ErrorScreen() {\n  return (\n    <div className=\"error-screen\">\n      <p>Ne cerem scuze!</p>\n      <p>Te rugam sa reincarci aceasta pagina.</p>\n    </div>\n  );\n}\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const CREATE_CUSTOMER_ORDER = gql`\r\n  mutation CreateCustomerOrder($firstName: String!, $lastName: String!, $phone: String!, $email: String!, $region: String!, $city: String!, $street: String!, $streetNumber: String!, $serviceId: Float!, $details: [OderDetailIn]){ \r\n    createCustomerOrder(firstName: $firstName, lastName: $lastName, phone: $phone, email: $email, region: $region, city: $city, street: $street, streetNumber: $streetNumber, serviceId: $serviceId, details: $details) {\r\n      successful\r\n      message    \r\n    }\r\n  }\r\n`;","import { useState, useEffect } from 'react';\r\n\r\nconst useFilterServicii = (servicii, specializare) => {\r\n  const [filteredServicii, setFilteredservicii] = useState();\r\n\r\n  useEffect(() => {\r\n    if (specializare) {\r\n      const filteredArray = servicii.filter((serviciu) =>\r\n        serviciu.denumire.toLowerCase().includes(specializare),\r\n      );\r\n      setFilteredservicii(filteredArray);\r\n    }\r\n  }, [servicii, specializare]);\r\n\r\n  return { filteredServicii };\r\n};\r\n\r\nexport default useFilterServicii;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport './ProgramareSection.component.scss';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { AppContext } from '../../../contexts/AppContext';\r\nimport ButtonProgramare from '../../Button/Button.component.jsx';\r\nimport SelectSpecializare from '../../Select/SelectSpecializare/SelectSpecializare.component';\r\nimport SelectServiciu from '../../Select/SelectServiciu/SelectServiciu.component.jsx';\r\nimport SelectTerapeut from '../../Select/SelectTerapeut/SelectTerapeut.component.jsx';\r\nimport SelectTimeSlot from '../../Select/SelectTimeSlot/SelectTimeSlot.component.jsx';\r\nimport Input from '../../Input/Input.component.jsx';\r\nimport DatePicker from 'react-datepicker';\r\nimport IntroSection from '../../Sections/IntroSection/IntroSection.component.jsx';\r\nimport useSetServiciuContext from '../../../hooks/useSetServiciuContext.jsx';\r\nimport useFilterTerapeuti from '../../../hooks/useFilterTerapeuti.jsx';\r\nimport useGetTerapeutCalendarAndProgramari from '../../../hooks/useGetTerapeutCalendarAndProgramari.jsx';\r\nimport useGetTimeslotsForDateAndTerapeut from '../../../hooks/useGetTimeslotsForDateAndTerapeut.jsx';\r\nimport useFilterHours from '../../../hooks/useFilterHours.jsx';\r\nimport useCreateComanda from '../../../hooks/useCreateComanda.jsx';\r\nimport useCreateProgramari from '../../../hooks/useCreateProgramari.jsx';\r\nimport {\r\n  checkIfCalendar,\r\n  checkIfProgramari,\r\n  processMTypes,\r\n  processPartners,\r\n  processServices,\r\n} from '../../../utils.js';\r\nimport Spinner from '../../Spinner/Spinner.component.jsx';\r\nimport ErrorScreen from '../../ErrorScreen/ErrorScreen.component.jsx';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport {\r\n  GET_ALL_PARTNERS,\r\n  GET_ALL_SERVICES,\r\n  GET_ALL_M_TYPES,\r\n} from '../../../graphql/queries';\r\nimport { CREATE_CUSTOMER_ORDER } from '../../../graphql/mutations';\r\nimport useFilterServicii from '../../../hooks/useFilterServicii';\r\n\r\nexport default function ProgramareSection() {\r\n  const { isTablet } = useContext(AppContext);\r\n\r\n  const { programareFromCardObj } = useContext(AppContext);\r\n  const [programareFromCard, setProgramareFromCard] = programareFromCardObj;\r\n  const [isError, setIsError] = useState(false);\r\n  const [hasData, setHasData] = useState(false);\r\n\r\n  const [startProgramare, setStartProgramare] = useState(false);\r\n  const [specializari, setSpecializari] = useState([]);\r\n  const [specializare, setSpecializare] = useState(null);\r\n  const [servicii, setServicii] = useState([]);\r\n  const [serviciu, setServiciu] = useState(null);\r\n  const [terapeuti, setTerapeuti] = useState(null);\r\n  const [terapeutId, setTerapeutId] = useState(null);\r\n  const [terapeut, setTerapeut] = useState(null);\r\n  const [statusComanda, setStatusComanda] = useState(false);\r\n\r\n  //Datepicker\r\n  const [startDate, setStartDate] = useState();\r\n  //Timeslots\r\n  const [timeSlotStart, setTimeSlotStart] = useState();\r\n\r\n  const [comanda, setComanda] = useState({\r\n    nume: '',\r\n    prenume: '',\r\n    telefon: '',\r\n    email: '',\r\n    judet: '',\r\n    localitate: '',\r\n    strada: '',\r\n    nr: '',\r\n    serviciu: 0,\r\n    sedinte: '',\r\n    specializare: '',\r\n    programari: [],\r\n  });\r\n  // console.log('Comanda', comanda);\r\n  const [createOrder, createOrderObj] = useMutation(CREATE_CUSTOMER_ORDER);\r\n\r\n  const mQObj = useQuery(GET_ALL_M_TYPES);\r\n  const mQData = mQObj?.data ? mQObj.data['getAllMTypes'] : [];\r\n  const sQObj = useQuery(GET_ALL_SERVICES);\r\n  const sQData = sQObj?.data ? sQObj.data['getAllServices'] : [];\r\n  const pQObj = useQuery(GET_ALL_PARTNERS);\r\n  const pQData = pQObj?.data ? pQObj.data['getAllPartners'] : [];\r\n\r\n  useEffect(() => {\r\n    if (startProgramare || programareFromCard) {\r\n      if (mQData) {\r\n        const pMData = processMTypes(mQData);\r\n        if (pMData.length) {\r\n          setHasData(true);\r\n          setSpecializari(pMData);\r\n        }\r\n      }\r\n      if (sQData) {\r\n        const pSData = processServices(sQData);\r\n        if (pSData.length) {\r\n          setHasData(true);\r\n          setServicii(pSData);\r\n        }\r\n      }\r\n      if (pQData) {\r\n        const pPData = processPartners(pQData);\r\n        if (pPData.length) {\r\n          setTerapeuti(pPData);\r\n        }\r\n      }\r\n    }\r\n  }, [startProgramare, programareFromCard]);\r\n\r\n  const { sedinte, durataSedinta } = useSetServiciuContext(servicii, serviciu);\r\n\r\n  useEffect(() => {\r\n    if (terapeutId) {\r\n      for (let i = 0; i < terapeuti.length; i++) {\r\n        if (terapeuti[i].id == terapeutId) {\r\n          setTerapeut(terapeuti[i].id);\r\n        }\r\n      }\r\n    }\r\n  }, [terapeutId]);\r\n\r\n  const { filteredTerapeuti } = useFilterTerapeuti(terapeuti, specializare);\r\n  const { filteredServicii } = useFilterServicii(servicii, specializare);\r\n\r\n  const { programari } = useCreateProgramari(\r\n    startDate,\r\n    terapeutId,\r\n    timeSlotStart,\r\n    sedinte,\r\n  );\r\n\r\n  const handleChangeSpecializare = (e) => {\r\n    const value = e.target.value;\r\n    setSpecializare(value);\r\n  };\r\n\r\n  const handleChangeServiciu = (e) => {\r\n    const value = e.target.value;\r\n    setServiciu(value);\r\n    setComanda({\r\n      ...comanda,\r\n      serviciu: value,\r\n    });\r\n  };\r\n\r\n  const handleChangeTerapeut = (e) => {\r\n    const value = e.target.value;\r\n    setTerapeutId(value);\r\n  };\r\n\r\n  const handleChangeTime = (e) => {\r\n    setTimeSlotStart(e.target.value);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const value = e.target.value;\r\n    setComanda({\r\n      ...comanda,\r\n      [e.target.name]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (programareFromCard) {\r\n      setStartProgramare(true);\r\n    }\r\n  }, [programareFromCard]);\r\n\r\n  useEffect(() => {\r\n    if (programareFromCard) {\r\n      const spec = specializari.filter(\r\n        (spec) => spec.id == programareFromCard.specializare,\r\n      );\r\n      const serv = servicii.filter(\r\n        (serviciu) =>\r\n          serviciu.denumire.toLowerCase() ==\r\n          programareFromCard.denumire.toLowerCase(),\r\n      );\r\n      setSpecializare(spec[0].denumire);\r\n      setServiciu(programareFromCard.denumire);\r\n      setComanda({\r\n        ...comanda,\r\n        serviciu: serv[0].id,\r\n        specializare: spec[0].denumire,\r\n      });\r\n    }\r\n  }, [startProgramare]);\r\n\r\n  const handleProgramare = async () => {\r\n    setStatusComanda(true);\r\n\r\n    let dets = [];\r\n    if (comanda.programari.length) {\r\n      comanda.programari.forEach((el) => {\r\n        const objSched = {\r\n          partner_id: parseFloat(el.terapeut),\r\n          appointment_start: parseFloat(el.timeSlotStart),\r\n          appointment_end: parseFloat(el.timeSlotEnd),\r\n          appointment_order: parseInt(el.sedinta),\r\n        };\r\n        dets.push(objSched);\r\n      });\r\n    }\r\n\r\n    await createOrder({\r\n      variables: {\r\n        firstName: comanda.prenume,\r\n        lastName: comanda.nume,\r\n        phone: comanda.telefon,\r\n        email: comanda.email,\r\n        region: comanda.judet,\r\n        city: comanda.localitate,\r\n        street: comanda.strada,\r\n        streetNumber: comanda.nr,\r\n        serviceId: parseFloat(comanda.serviciu),\r\n        details: dets,\r\n      },\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setComanda({\r\n        nume: '',\r\n        prenume: '',\r\n        telefon: '',\r\n        email: '',\r\n        judet: '',\r\n        localitate: '',\r\n        strada: '',\r\n        nr: '',\r\n        serviciu: 0,\r\n        sedinte: '',\r\n        specializare: '',\r\n        programari: [],\r\n      });\r\n      setStatusComanda(false);\r\n      setStartProgramare(false);\r\n      setProgramareFromCard(null);\r\n      setSpecializare(null);\r\n      setServiciu(null);\r\n      setTerapeutId(null);\r\n      setStartDate(null);\r\n      setTimeSlotStart(null);\r\n      const heroSection = document.querySelector('.hero-section');\r\n      heroSection.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n    }, 2000);\r\n  };\r\n\r\n  const { terapeutCalendar, terapeutProgramari } =\r\n    useGetTerapeutCalendarAndProgramari(terapeuti, terapeutId);\r\n\r\n  const { calendarTimeslotsForDate, programariTimeslotsForDate } =\r\n    useGetTimeslotsForDateAndTerapeut(\r\n      startDate,\r\n      terapeutCalendar,\r\n      terapeutProgramari,\r\n    );\r\n\r\n  const { filteredHours } = useFilterHours(\r\n    calendarTimeslotsForDate,\r\n    programariTimeslotsForDate,\r\n    startDate,\r\n    durataSedinta,\r\n  );\r\n\r\n  useCreateComanda(programari, sedinte, specializare, comanda, setComanda);\r\n\r\n  return (\r\n    <>\r\n      {mQObj.loading || sQObj.loading || pQObj.loading ? (\r\n        <Spinner />\r\n      ) : isError ? (\r\n        <ErrorScreen />\r\n      ) : (\r\n        <section\r\n          className={\r\n            isTablet\r\n              ? 'programare-section container mx-auto'\r\n              : 'programare-section container-fluid mx-auto'\r\n          }\r\n          id=\"programare-section\"\r\n        >\r\n          <IntroSection\r\n            caption={'programare'}\r\n            title={'Programeaza-te in 4 pasi simpli!'}\r\n            copy={\r\n              'Alege serviciul, terapeutul, data si ora programarii si achita cash sau cu cardul in siguranta.'\r\n            }\r\n          />\r\n          <div className=\"programare-section-container flex flex-column justify-center align-center\">\r\n            {startProgramare ? (\r\n              <SelectSpecializare\r\n                value={\r\n                  programareFromCard ? specializare : 'Alege specializarea'\r\n                }\r\n                handleChange={handleChangeSpecializare}\r\n                name=\"specializare\"\r\n                label={'specializare'}\r\n                options={specializari}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {specializare ? (\r\n              <SelectServiciu\r\n                value={programareFromCard ? serviciu : 'Alege serviciul'}\r\n                handleChange={handleChangeServiciu}\r\n                name=\"serviciu\"\r\n                label={'serviciu'}\r\n                options={filteredServicii}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {serviciu ? (\r\n              <SelectTerapeut\r\n                value={'Alege terapeutul'}\r\n                handleChange={handleChangeTerapeut}\r\n                name=\"terapeut\"\r\n                label={'terapeut'}\r\n                options={filteredTerapeuti}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {terapeutId ? (\r\n              <div className=\"calendar\">\r\n                <label>\r\n                  <p>Alege data</p>\r\n                </label>\r\n                <DatePicker\r\n                  selected={startDate}\r\n                  onChange={(date) => setStartDate(date)}\r\n                  startDate={startDate}\r\n                  dayClassName={(date) =>\r\n                    checkIfProgramari(terapeutProgramari, date)\r\n                      ? 'active-programare'\r\n                      : checkIfCalendar(terapeutCalendar, date)\r\n                      ? 'active-calendar'\r\n                      : 'innactive'\r\n                  }\r\n                  minDate={new Date()}\r\n                  inline\r\n                />\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {startDate ? (\r\n              <SelectTimeSlot\r\n                value={'Alege ora'}\r\n                handleChange={handleChangeTime}\r\n                name=\"time\"\r\n                label={'time'}\r\n                options={filteredHours}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {timeSlotStart ? (\r\n              <Input\r\n                value={comanda.nume}\r\n                handleChange={handleChange}\r\n                name=\"nume\"\r\n                label={'nume'}\r\n                type={'text'}\r\n                placeholder={'Nume'}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {comanda.nume !== '' ? (\r\n              <Input\r\n                value={comanda.prenume}\r\n                handleChange={handleChange}\r\n                name=\"prenume\"\r\n                label={'prenume'}\r\n                type={'text'}\r\n                placeholder={'prenume'}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {comanda.prenume !== '' ? (\r\n              <Input\r\n                value={comanda.telefon}\r\n                handleChange={handleChange}\r\n                name=\"telefon\"\r\n                label={'telefon'}\r\n                type={'number'}\r\n                placeholder={'telefon'}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {comanda.telefon !== '' ? (\r\n              <Input\r\n                value={comanda.email}\r\n                handleChange={handleChange}\r\n                name=\"email\"\r\n                label={'email'}\r\n                type={'email'}\r\n                placeholder={'email'}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {comanda.email !== '' ? (\r\n              <Input\r\n                value={comanda.judet}\r\n                handleChange={handleChange}\r\n                name=\"judet\"\r\n                label={'judet'}\r\n                type={'text'}\r\n                placeholder={'judet'}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {comanda.judet !== '' ? (\r\n              <Input\r\n                value={comanda.localitate}\r\n                handleChange={handleChange}\r\n                name=\"localitate\"\r\n                label={'localitate'}\r\n                type={'text'}\r\n                placeholder={'localitate'}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {comanda.localitate !== '' ? (\r\n              <Input\r\n                value={comanda.strada}\r\n                handleChange={handleChange}\r\n                name=\"strada\"\r\n                label={'strada'}\r\n                type={'text'}\r\n                placeholder={'strada'}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {comanda.strada !== '' ? (\r\n              <Input\r\n                value={comanda.nr}\r\n                handleChange={handleChange}\r\n                name=\"nr\"\r\n                label={'nr'}\r\n                type={'text'}\r\n                placeholder={'nr strada'}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {comanda.nr !== '' ? (\r\n              <div\r\n                className=\"btn-wrapper flex flex-column justify-center align-center\"\r\n                onClick={() => handleProgramare()}\r\n              >\r\n                <ButtonProgramare\r\n                  text={'trimite'}\r\n                  classe={'btn-programare-client'}\r\n                />\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {!startProgramare ? (\r\n              <div\r\n                className=\"btn-wrapper flex flex-column justify-center align-center\"\r\n                onClick={() => setStartProgramare(true)}\r\n              >\r\n                <ButtonProgramare\r\n                  text={'programeaza-te!'}\r\n                  classe={'btn-programare-client'}\r\n                />\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {statusComanda ? (\r\n              <p style={{ marginTop: '16px' }}>\r\n                Comanda a fost finalizata cu succes!\r\n              </p>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        </section>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const GET_ALL_M_TYPES = gql`\r\n  query {\r\n    getAllMTypes {\r\n      mt_id\r\n      mt_name\r\n      created\r\n      updated\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_ALL_SERVICES = gql`\r\n  query {\r\n    getAllServices {\r\n      s_id\r\n      service_name\r\n      m_type_id\r\n      mt_name\r\n      appointments_number\r\n      appointment_duration\r\n      service_cost\r\n      profile_picture_url\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_ALL_PARTNERS = gql`\r\n  query {\r\n    getAllPartners {\r\n      p_id\r\n      first_name\r\n      last_name\r\n      profile_picture_url\r\n      m_types\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_PARTNER_CURRENT_SCHEDULE = gql`\r\n  query GetPartnerCurrentSchedule($id: Float) {\r\n    getPartnerCurrentSchedule(id: $id) {\r\n      schedule_start\r\n      schedule_end\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_PARTNER_FILLED_TIME_SLOTS = gql`\r\n  query GetPartnerFilledTimeSlots($id: Float) {\r\n    getPartnerFilledTimeSlots(id: $id) {\r\n      schedule_start\r\n      schedule_end\r\n    }\r\n  }\r\n`;\r\n"],"names":["IntroSection","caption","title","copy","className","SelectSpecializare","options","name","label","value","handleChange","inputRef","useRef","checkIfActiveElement","length","onChange","defaultValue","ref","disabled","hidden","map","option","index","denumire","SelectServiciu","id","SelectTerapeut","nume","prenume","SelectTimeSlot","convertToTime","input","hours","Math","floor","minutes","Input","type","placeholder","required","servicii","serviciu","useState","specializare","setSpecializare","sedinte","setSedinte","durataSedinta","setDurataSedinta","useEffect","forEach","el","parseInt","durata","terapeuti","filteredTerapeuti","setFilteredTerapeuti","filteredArray","filter","terapeut","toLowerCase","includes","terapeutId","terapeutCalendar","setTerapeutCalendar","terapeutProgramari","setTerapeutProgramari","partnerSchedQObj","useQuery","GET_PARTNER_CURRENT_SCHEDULE","variables","parseFloat","querySchedData","data","partnerFilledTSlotsQObj","GET_PARTNER_FILLED_TIME_SLOTS","queryFilledTSlotsData","processedSched","processPartnerSched","processedTSlots","startDate","calendarTimeslotsForDate","setCalendarTimeslotsForDate","i","timestampToDayAndMonth","timeSlotStart","dateToDayAndMonth","start","end","timeSlotEnd","programariTimeslotsForDate","setProgramariTimeslotsForDate","filteredHours","setFilteredHours","push","hoursAndMinutes","startIntervalCalendar","endIntervalCalendar","startIntervalProgramari","endIntervalProgramari","programari","comanda","setComanda","setProgramari","programareInitiala","sedinta","setHours","ErrorScreen","CREATE_CUSTOMER_ORDER","gql","filteredServicii","setFilteredservicii","ProgramareSection","isTablet","useContext","AppContext","programareFromCardObj","programareFromCard","setProgramareFromCard","isError","setHasData","startProgramare","setStartProgramare","specializari","setSpecializari","setServicii","setServiciu","setTerapeuti","setTerapeutId","setTerapeut","statusComanda","setStatusComanda","setStartDate","setTimeSlotStart","telefon","email","judet","localitate","strada","nr","useMutation","createOrder","mQObj","GET_ALL_M_TYPES","mQData","sQObj","GET_ALL_SERVICES","sQData","pQObj","GET_ALL_PARTNERS","pQData","pMData","processMTypes","pSData","processServices","pPData","processPartners","useSetServiciuContext","useFilterTerapeuti","useFilterServicii","useCreateProgramari","e","target","spec","serv","handleProgramare","dets","objSched","partner_id","appointment_start","appointment_end","appointment_order","firstName","lastName","phone","region","city","street","streetNumber","serviceId","details","setTimeout","document","querySelector","scrollIntoView","behavior","block","useGetTerapeutCalendarAndProgramari","useGetTimeslotsForDateAndTerapeut","useFilterHours","useCreateComanda","loading","selected","date","dayClassName","checkIfProgramari","checkIfCalendar","minDate","Date","inline","onClick","text","classe","style","marginTop"],"sourceRoot":""}