{"version":3,"file":"static/js/787.39025b8a.chunk.js","mappings":"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","sources":["components/Sections/IntroSection/IntroSection.component.jsx","components/Cards/CardServiciu/CardServiciu.component.jsx","components/Sections/ServiciiSection/ServiciiSection.component.jsx","graphql/queries.js"],"sourcesContent":["import React from 'react';\nimport './IntroSection.component.scss';\n\nexport default function IntroSection({ caption, title, copy }) {\n  return (\n    <div className=\"intro-section\">\n      <div className=\"intro-section-header\">\n        <p className=\"caption\">{caption}</p>\n        <h2>{title}</h2>\n      </div>\n      <p>{copy}</p>\n    </div>\n  );\n}\n","import React, { useContext, Suspense, lazy } from 'react';\nimport './CardServiciu.component.scss';\nimport ButtonProgramare from '../../Button/Button.component.jsx';\nimport { AppContext } from '../../../contexts/AppContext.js';\nimport { scrollToTarget } from '../../../utils.js';\nimport Spinner from '../../Spinner/Spinner.component';\n\nconst ImagePlaceholder = lazy(() =>\n  import('../../ImagePlaceholder/ImagePlaceholder.component.jsx'),\n);\n\nexport default function CardServiciu({\n  nume,\n  image,\n  imageAlt,\n  tarif,\n  sedinte,\n  durata,\n  masaj,\n}) {\n  const { programareFromCardObj } = useContext(AppContext);\n  const [programareFromCard, setProgramareFromCard] = programareFromCardObj;\n\n  const handleCardClick = () => {\n    scrollToTarget('.programare-section');\n    setProgramareFromCard({ denumire: nume, specializare: masaj });\n  };\n\n  return (\n    <div className=\"card-serviciu\">\n      <div className=\"card-serviciu-header\">\n        <p className=\"card\">{nume}</p>\n        <Suspense fallback={<Spinner />}>\n          <ImagePlaceholder\n            image={image}\n            imageAlt={imageAlt}\n            classe={'card-image'}\n            fetchpriority={'low'}\n          />\n        </Suspense>\n      </div>\n      <div className=\"card-serviciu-body\">\n        <div className=\"card-serviciu-body-data\">\n          <div className=\"card-serviciu-body-line\">\n            <p className=\"card\">tarif:</p>\n            <p className=\"card\">{tarif}</p>\n          </div>\n          <div className=\"card-serviciu-body-line\">\n            <p className=\"card\">sedinte:</p>\n            <p className=\"card\">{sedinte}</p>\n          </div>\n          <div className=\"card-serviciu-body-line\">\n            <p className=\"card\">durata:</p>\n            <p className=\"card\">{durata}</p>\n          </div>\n          <div className=\"card-serviciu-body-line\">\n            <p className=\"card\">masaj:</p>\n            <p className=\"card\">{masaj}</p>\n          </div>\n        </div>\n        <div className=\"btn-wrapper\" onClick={() => handleCardClick()}>\n          <ButtonProgramare\n            classe={'btn-card-programare'}\n            text={'programare'}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport './ServiciiSection.component.scss';\r\nimport IntroSection from '../IntroSection/IntroSection.component.jsx';\r\nimport CardServiciu from '../../Cards/CardServiciu/CardServiciu.component.jsx';\r\nimport { AppContext } from '../../../contexts/AppContext';\r\nimport { processServices, scrollSlider } from '../../../utils.js';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_SERVICES } from '../../../graphql/queries';\r\n\r\nexport default function ServiciiSection() {\r\n  const { isTablet } = useContext(AppContext);\r\n  const [servicii, setServicii] = useState([]);\r\n  useEffect(() => {\r\n    scrollSlider('.slider-container');\r\n  }, []);\r\n\r\n  const currentQObj = useQuery(GET_ALL_SERVICES);\r\n  const queryData = currentQObj?.data ? currentQObj.data['getAllServices'] : [];\r\n\r\n  useEffect(() => {\r\n    if (queryData) {\r\n      const processedData = processServices(queryData);\r\n      if (processedData.length) {\r\n        setServicii(processedData);\r\n      } else {\r\n        setServicii([]);\r\n      }\r\n    }\r\n  }, [queryData]);\r\n\r\n  return (\r\n    <section\r\n      className={\r\n        isTablet\r\n          ? 'servicii-section container mx-auto'\r\n          : 'servicii-section container-fluid mx-auto'\r\n      }\r\n    >\r\n      <IntroSection\r\n        caption={'servicii'}\r\n        title={'Mesaje terapeutice sau de relaxare'}\r\n        copy={\r\n          'Elimina stresul, oboseala si durerile musculare acumalate dupa serviciu sau efort fizic intens.'\r\n        }\r\n      />\r\n      <div className=\"slider-servicii\">\r\n        <div className=\"slider-container\">\r\n          {servicii.map((serviciu, index) => (\r\n            <CardServiciu\r\n              key={index}\r\n              nume={serviciu.denumire}\r\n              image={serviciu.image}\r\n              imageAlt={serviciu.denumire}\r\n              tarif={serviciu.tarif}\r\n              sedinte={serviciu.sedinte}\r\n              durata={serviciu.durata}\r\n              masaj={\r\n                serviciu.denumire.toLowerCase().includes('terapeutic')\r\n                  ? 'terapeutic'\r\n                  : 'relaxare'\r\n              }\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const GET_ALL_M_TYPES = gql`\r\n  query {\r\n    getAllMTypes {\r\n      mt_id\r\n      mt_name\r\n      created\r\n      updated\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_ALL_SERVICES = gql`\r\n  query {\r\n    getAllServices {\r\n      s_id\r\n      service_name\r\n      m_type_id\r\n      mt_name\r\n      appointments_number\r\n      appointment_duration\r\n      service_cost\r\n      profile_picture_url\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_ALL_PARTNERS = gql`\r\n  query {\r\n    getAllPartners {\r\n      p_id\r\n      first_name\r\n      last_name\r\n      profile_picture_url\r\n      m_types\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_PARTNER_CURRENT_SCHEDULE = gql`\r\n  query GetPartnerCurrentSchedule($id: Float) {\r\n    getPartnerCurrentSchedule(id: $id) {\r\n      schedule_start\r\n      schedule_end\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_PARTNER_FILLED_TIME_SLOTS = gql`\r\n  query GetPartnerFilledTimeSlots($id: Float) {\r\n    getPartnerFilledTimeSlots(id: $id) {\r\n      schedule_start\r\n      schedule_end\r\n    }\r\n  }\r\n`;\r\n"],"names":["IntroSection","caption","title","copy","className","ImagePlaceholder","lazy","CardServiciu","nume","image","imageAlt","tarif","sedinte","durata","masaj","programareFromCardObj","useContext","AppContext","setProgramareFromCard","Suspense","fallback","classe","fetchpriority","onClick","scrollToTarget","denumire","specializare","text","ServiciiSection","isTablet","useState","servicii","setServicii","useEffect","scrollSlider","currentQObj","useQuery","GET_ALL_SERVICES","queryData","data","processedData","processServices","length","map","serviciu","index","toLowerCase","includes","GET_ALL_M_TYPES","gql","GET_ALL_PARTNERS","GET_PARTNER_CURRENT_SCHEDULE","GET_PARTNER_FILLED_TIME_SLOTS"],"sourceRoot":""}